import { Event, CloudFunction } from '../cloud-functions';
import * as firebase from 'firebase-admin';
/**
 * Handle events at a Firebase Realtime Database ref.
 *
 * The database.ref() functions behave very similarly to the normal Firebase
 * SDKs. Any change to the database that affects the data at or below ref will
 * fire an event in Cloud Functions.
 *
 * There are three important differences between listening to a database event
 * in Cloud Functions and using the Realtime Database SDK:
 * 1. The Cloud Functions SDK allows wildcards in the ref name. Any path
 *    component in curly brackets ({}) will match any value. The actual value
 *    that matched will be returned in eventnt.params. E.g. ref('foo/{bar}') will
 *    match a change at 'foo/baz' and the event will have params {bar: 'baz'}.
 * 2. Unlike the Realtime Database SDK, Cloud Functions will not fire an event
 *    for data that already existed before the Cloud Function was deployed.
 * 3. Cloud Function events have access to more information than the normal
 *    SDK. E.g. the snapshot passed to a Cloud Function has access to the
 *    previous event data as well as the user who triggered the change.
 */
export declare function ref(path: string): RefBuilder;
/** Builder used to create Cloud Functions for Firebase Realtime Database References. */
export declare class RefBuilder {
    private apps;
    private resource;
    /** Respond to any write that affects a ref. */
    onWrite(handler: (event: Event<DeltaSnapshot>) => PromiseLike<any> | any): CloudFunction<DeltaSnapshot>;
}
export declare class DeltaSnapshot implements firebase.database.DataSnapshot {
    private app;
    private adminApp;
    private _adminRef;
    private _ref;
    private _path;
    private _data;
    private _delta;
    private _newData;
    private _childPath;
    private _isPrevious;
    constructor(app: firebase.app.App, adminApp: firebase.app.App, data: any, delta: any, path?: string);
    readonly ref: firebase.database.Reference;
    readonly adminRef: firebase.database.Reference;
    readonly key: string;
    val(): any;
    exportVal(): any;
    getPriority(): any;
    exists(): boolean;
    child(childPath?: string): DeltaSnapshot;
    readonly previous: DeltaSnapshot;
    readonly current: DeltaSnapshot;
    changed(): boolean;
    forEach(action: (a: DeltaSnapshot) => boolean): boolean;
    hasChild(childPath: string): boolean;
    hasChildren(): boolean;
    numChildren(): number;
    /** Prints the value of the snapshot; use '.previous' and '.current' to explicitly see
     *  the previous and current values.
     */
    toJSON(): Object;
    private _checkAndConvertToArray(node);
    private _dup(previous, childPath?);
    private _fullPath();
}
